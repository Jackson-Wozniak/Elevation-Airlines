// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Airline.Server.Core.Data;

#nullable disable

namespace Airline.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251007164600_FlightUpdate")]
    partial class FlightUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Airline.Server.Domain.aircraft.Entity.Aircraft", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CruiseSpeedKnots")
                        .HasColumnType("int");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("int");

                    b.Property<int>("RangeNauticalMiles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("Airline.Server.Domain.airport.Entity.Airport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("EconomicValuePercentile")
                        .HasColumnType("double");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Airline.Server.Domain.fleet.Entity.Plane", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AircraftId")
                        .HasColumnType("bigint");

                    b.Property<string>("CallSign")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Airline.Server.Domain.flight.Entity.Flight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BoardingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpectedArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FlightStatus")
                        .HasColumnType("int");

                    b.Property<long>("PlaneId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TakeoffTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PlaneId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Airline.Server.Domain.flight.Entity.FlightPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("FlightPlan");
                });

            modelBuilder.Entity("Airline.Server.Domain.routenetwork.Entity.NetworkedRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MarketType")
                        .HasColumnType("int");

                    b.Property<int>("PlannedWeeklyFlights")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NetworkedRoutes");
                });

            modelBuilder.Entity("Airline.Server.Domain.fleet.Entity.Plane", b =>
                {
                    b.HasOne("Airline.Server.Domain.aircraft.Entity.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("Airline.Server.Domain.flight.Entity.Flight", b =>
                {
                    b.HasOne("Airline.Server.Domain.fleet.Entity.Plane", "Plane")
                        .WithMany("ScheduledFlights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("Airline.Server.Domain.flight.Entity.FlightPlan", b =>
                {
                    b.HasOne("Airline.Server.Domain.flight.Entity.Flight", "Flight")
                        .WithOne("FlightPlan")
                        .HasForeignKey("Airline.Server.Domain.flight.Entity.FlightPlan", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Airline.Server.Domain.shared.Route", "Route", b1 =>
                        {
                            b1.Property<long>("FlightPlanId")
                                .HasColumnType("bigint");

                            b1.Property<long>("DepartureId")
                                .HasColumnType("bigint");

                            b1.Property<long>("DestinationId")
                                .HasColumnType("bigint");

                            b1.HasKey("FlightPlanId");

                            b1.HasIndex("DepartureId");

                            b1.HasIndex("DestinationId");

                            b1.ToTable("FlightPlan");

                            b1.HasOne("Airline.Server.Domain.airport.Entity.Airport", "Departure")
                                .WithMany()
                                .HasForeignKey("DepartureId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Airline.Server.Domain.airport.Entity.Airport", "Destination")
                                .WithMany()
                                .HasForeignKey("DestinationId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("FlightPlanId");

                            b1.Navigation("Departure");

                            b1.Navigation("Destination");
                        });

                    b.Navigation("Flight");

                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("Airline.Server.Domain.routenetwork.Entity.NetworkedRoute", b =>
                {
                    b.OwnsOne("Airline.Server.Domain.shared.Route", "Route", b1 =>
                        {
                            b1.Property<long>("NetworkedRouteId")
                                .HasColumnType("bigint");

                            b1.Property<long>("DepartureId")
                                .HasColumnType("bigint");

                            b1.Property<long>("DestinationId")
                                .HasColumnType("bigint");

                            b1.HasKey("NetworkedRouteId");

                            b1.HasIndex("DepartureId");

                            b1.HasIndex("DestinationId");

                            b1.ToTable("NetworkedRoutes");

                            b1.HasOne("Airline.Server.Domain.airport.Entity.Airport", "Departure")
                                .WithMany()
                                .HasForeignKey("DepartureId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Airline.Server.Domain.airport.Entity.Airport", "Destination")
                                .WithMany()
                                .HasForeignKey("DestinationId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("NetworkedRouteId");

                            b1.Navigation("Departure");

                            b1.Navigation("Destination");
                        });

                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("Airline.Server.Domain.fleet.Entity.Plane", b =>
                {
                    b.Navigation("ScheduledFlights");
                });

            modelBuilder.Entity("Airline.Server.Domain.flight.Entity.Flight", b =>
                {
                    b.Navigation("FlightPlan")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
